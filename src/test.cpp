#include "dynamixelControl.h"
#include <unistd.h>
#define max 10
struct leg_joints{
  float hip[max]       =
  // {0.9961,1.051,1.1206,1.1855,0.9114,0.9114,0.86982,0.84872,0.85864,0.9961};
  {0.78192,1.0782,1.1312,1.1745,0.94197,0.94197,0.88734,0.84245,0.80706,0.78192};
  // {0.93188,0.96692,1.0043,1.0429,1.0817,1.12,1.157,1.1922,1.2249,1.2544,1.28,1.3007,1.3155,1.1027,0.84562,0.84562,0.83917,0.83306,0.8273,0.8219,0.81686,0.81219,0.80791,0.80403,0.80056,0.7975,0.79489,0.79274,0.79107,0.78989,0.78925,0.78916,0.78966,0.7908,0.79262,0.79518,0.79855,0.80282,0.80809,0.8145,0.82223,0.83153,0.84276,0.85644,0.87345,0.89547,0.92651,0.98727,1.0198,1.0115,1.0033,0.99509,0.98698,0.97892,0.97092,0.96299,0.95512,0.94731,0.93957,0.93188};
  // {0.78,0.76288,0.74845,0.73792,0.73295,0.73551,0.74775,0.77213,0.81212,0.87552,1.0485,1.0388,1.0338,1.0337,1.0385,1.0479,1.0615,1.0785,1.0982,1.1062,0.96502,0.91119,0.8738,0.84471,0.82044,0.79916};
  // {0.78,0.7455,0.71533,0.69082,0.67376,0.66616,0.67009,0.6876,0.72098,0.77383,0.85624,1.0341,1.0314,1.0337,1.0409,1.0524,1.0677,1.086,1.1065,1.1281,1.1497,1.0646,0.96855,0.90866,0.86042,0.81818};
  // {0.77672,0.74411,0.71291,0.68638,0.66939,0.66822,0.69096,0.75179,0.92872,0.97233,0.94739,0.931,0.92336,0.92439,0.93379,0.9511,0.97568,1.0067,1.0429,1.0829,1.1247,1.0898,0.94535,0.8853,0.84415,0.8096};
  float knee[max]      =
  // {0,0,0,0,0.52253,0.52253,0.49416,0.43292,0.32174,0};
  {0.41314,0,0,0,0.42066,0.42066,0.44303,0.44909,0.43946,0.41314};
  // {0,0,0,0,0,0,0,0,0,0,0,0,0,0.36651,0.78677,0.78677,0.78143,0.77556,0.76916,0.76222,0.75473,0.74667,0.73803,0.72879,0.71893,0.70843,0.69727,0.6854,0.67282,0.65947,0.64531,0.6303,0.61437,0.59747,0.57951,0.56039,0.54,0.5182,0.49481,0.46959,0.44226,0.41238,0.37938,0.34237,0.29987,0.24911,0.18338,0.068157,0,0,0,0,0,0,0,0,0,0,0,0};
  // {0.7247,0.74493,0.75169,0.74409,0.72105,0.68144,0.62397,0.54688,0.44651,0.31166,0,0,0,0,0,0,0,0,0,0.022187,0.29375,0.41824,0.51189,0.58635,0.64567,0.69158};
  // {0.7247,0.77026,0.79959,0.81182,0.80592,0.78089,0.7359,0.67001,0.58161,0.46646,0.30897,0,0,0,0,0,0,0,0,0,0,0.17595,0.36573,0.48923,0.58571,0.66335};
  // {0.82956,0.86747,0.88401,0.87629,0.84018,0.77034,0.65865,0.48637,0.12736,0,0,0,0,0,0,0,0,0,0,0,0,0.12693,0.43054,0.58352,0.69136,0.77137};
  float back_hip[max]  =
  // {0.9114,0.86982,0.84872,0.85864,0.9961,0.9961,1.051,1.1206,1.1855,0.9114};
  {0.94197,0.88734,0.84245,0.80706,0.78192,0.78192,1.0782,1.1312,1.1745,0.94197};
  // {0.78925,0.78916,0.78966,0.7908,0.79262,0.79518,0.79855,0.80282,0.80809,0.8145,0.82223,0.83153,0.84276,0.85644,0.87345,0.89547,0.92651,0.98727,1.0198,1.0115,1.0033,0.99509,0.98698,0.97892,0.97092,0.96299,0.95512,0.94731,0.93957,0.93188,0.93188,0.96692,1.0043,1.0429,1.0817,1.12,1.157,1.1922,1.2249,1.2544,1.28,1.3007,1.3155,1.1027,0.84562,0.84562,0.83917,0.83306,0.8273,0.8219,0.81686,0.81219,0.80791,0.80403,0.80056,0.7975,0.79489,0.79274,0.79107,0.78989};
  // {1.0337,1.0385,1.0479,1.0615,1.0785,1.0982,1.1062,0.96502,0.91119,0.8738,0.84471,0.82044,0.79916,0.78,0.76288,0.74845,0.73792,0.73295,0.73551,0.74775,0.77213,0.81212,0.87552,1.0485,1.0388,1.0338};
  // {1.0337,1.0409,1.0524,1.0677,1.086,1.1065,1.1281,1.1497,1.0646,0.96855,0.90866,0.86042,0.81818,0.78,0.7455,0.71533,0.69082,0.67376,0.66616,0.67009,0.6876,0.72098,0.77383,0.85624,1.0341,1.0314};
  // {0.92439,0.93379,0.9511,0.97568,1.0067,1.0429,1.0829,1.1247,1.0898,0.94535,0.8853,0.84415,0.8096,0.77672,0.74411,0.71291,0.68638,0.66939,0.66822,0.69096,0.75179,0.92872,0.97233,0.94739,0.931,0.92336};
  float back_knee[max] =
  // {0.52253,0.49416,0.43292,0.32174,0,0,0,0,0,0.52253};
  {0.42066,0.44303,0.44909,0.43946,0.41314,0.41314,0,0,0,0.42066};
  // {0.64531,0.6303,0.61437,0.59747,0.57951,0.56039,0.54,0.5182,0.49481,0.46959,0.44226,0.41238,0.37938,0.34237,0.29987,0.24911,0.18338,0.068157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.36651,0.78677,0.78677,0.78143,0.77556,0.76916,0.76222,0.75473,0.74667,0.73803,0.72879,0.71893,0.70843,0.69727,0.6854,0.67282,0.65947};
  // {0,0,0,0,0,0,0.022187,0.29375,0.41824,0.51189,0.58635,0.64567,0.69158,0.7247,0.74493,0.75169,0.74409,0.72105,0.68144,0.62397,0.54688,0.44651,0.31166,0,0,0};
  // {0,0,0,0,0,0,0,0,0.17595,0.36573,0.48923,0.58571,0.66335,0.7247,0.77026,0.79959,0.81182,0.80592,0.78089,0.7359,0.67001,0.58161,0.46646,0.30897,0,0};
  // {0,0,0,0,0,0,0,0,0.12693,0.43054,0.58352,0.69136,0.77137,0.82956,0.86747,0.88401,0.87629,0.84018,0.77034,0.65865,0.48637,0.12736,0,0,0,0};
};



bool update_goal(DynamixelWorkbench *dxl,uint8_t *motors,uint8_t n,int32_t *goals,bool log=true){
  bool added;
  dxl->initBulkWrite();

  for(int i=0;i<n;i++){
    added=dxl->addBulkWriteParam(motors[i] , "Goal_Position",  goals[i]);
    if(log)printf("Update [ID:%d]:%s\n",motors[i], added ? "True" : "False");
  }
  return dxl->bulkWrite();
}

bool read_pos(DynamixelWorkbench *dxl,uint8_t *motors,uint8_t n,float *positions,bool log=true){
  bool read;
  dxl->initBulkRead();
  for(int i=0;i<n;i++){
  read=dxl->addBulkReadParam(motors[i], "Present_Position");
  if(!read){
    if(log)printf("[Error]Reading Positions\n");
    return false;
  }
  }
  dxl->setBulkRead();
  for(int i=0;i<n;i++){
    positions[i] = dxl->convertValue2Radian(motors[i],dxl->bulkRead(motors[i],"Present_Position"));
    if(log)printf("[ID:%d]-Position:%f\n",motors[i],positions[i]);
  }
  return true;
}


int main(){
  bool teach=false;
  uint8_t arr[10];
  uint8_t count;
  char val;
  int32_t _val[8];
  struct leg_joints legs;
  float current_pos[10];

  bool added,initialized ,returned;
  DynamixelWorkbench dxl;
  dynamixel_joint *joints[8];

  dxl.begin("/dev/USB2Dynamixel",115200);

  if (dxl.scan(arr, &count, 30) != true)
  {
  printf("Motors not detected!\n");
  return 1;
  }

  printf("\n\n------INIT MOTORS------\n");
  for(int i=0;i<count;i++){
  joints[i] = new dynamixel_joint(arr[i],&dxl,150,75);
  }


  printf("\n\n------TORQUE ENABLE------\n");
  for(int i=0;i<count;i++){
  joints[i]->torque(true);
  }




float hip_angle=0.8,knee_angle=0.9;
_val[0] = dxl.convertRadian2Value(arr[0],-hip_angle);
_val[1] = dxl.convertRadian2Value(arr[1],hip_angle);
_val[2] = dxl.convertRadian2Value(arr[2],-hip_angle);
_val[3] = dxl.convertRadian2Value(arr[3],hip_angle);
_val[4] = dxl.convertRadian2Value(arr[4],-knee_angle);
_val[5] = dxl.convertRadian2Value(arr[5],-knee_angle);
_val[6] = dxl.convertRadian2Value(arr[6],knee_angle);
_val[7] = dxl.convertRadian2Value(arr[7],knee_angle);

returned=update_goal(&dxl, arr, count, _val);
printf("Initialized?:%s\n", returned ? "True" : "False");
printf("\n\n-------Positions----------\n");
read_pos(&dxl, arr, count, current_pos);
printf("Continue?(Y/N):");
scanf("%c",&val);
switch(val){
  case 'y':
  case 'Y': break;
  case 'n':
  case 'N': return 0;
}

int i=0;



while(1){


 _val[0] = dxl.convertRadian2Value(arr[0],-legs.hip[(i%max)]);
 _val[1] = dxl.convertRadian2Value(arr[1],legs.back_hip[(i%max)]);
 _val[2] = dxl.convertRadian2Value(arr[2],-legs.back_hip[(i%max)]);
 _val[3] = dxl.convertRadian2Value(arr[3],legs.hip[(i%max)]);
 _val[4] = dxl.convertRadian2Value(arr[4],-legs.knee[(i%max)]);
 _val[5] = dxl.convertRadian2Value(arr[5],-legs.back_knee[(i%max)]);
 _val[6] = dxl.convertRadian2Value(arr[6],legs.back_knee[(i%max)]);
 _val[7] = dxl.convertRadian2Value(arr[7],legs.knee[(i%max)]);

  i+=1;

returned=update_goal(&dxl, arr, count, _val,false);

printf("Updated?:%s\n", returned ? "True" : "False");

while(joints[0]->moving()||joints[1]->moving()||joints[2]->moving()||joints[3]->moving());
read_pos(&dxl, arr, count, current_pos);
}
}
